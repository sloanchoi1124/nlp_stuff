import nltk
from nltk.align import IBMModel1
from nltk.align import IBMModel2
from nltk.align import AlignedSent
from nltk.align import Alignment
from nltk.corpus import comtrans
import time
# TODO: Initialize IBM Model 1 and return the model.
def create_ibm1(aligned_sents):
    ibm1 = IBMModel1(aligned_sents, 10)
    return ibm1
# TODO: Initialize IBM Model 2 and return the model.
def create_ibm2(aligned_sents):
    ibm2 = IBMModel2(aligned_sents, 10)
    return ibm2
# TODO: Compute the average AER for the first n sentences
#       in aligned_sents using model. Return the average AER.
def compute_avg_aer(aligned_sents, model, n):
    total_aer = 0
    for sent in aligned_sents[:n]:
	print sent.alignment_error_rate(model.align(sent)) + '\n'
	total_aer += sent.alignment_error_rate(model.align(sent))
    return total_aer/n
# TODO: Computes the alignments for the first 20 sentences in
#       aligned_sents and saves the sentences and their alignments
#       to file_name. Use the format specified in the assignment.
def save_model_output(aligned_sents, model, file_name):
    f = open(file_name, 'w')
    for sent in aligned_sents[:20]:
	res = model.align(sent)
	print >> f, res.words
	print >> f, res.mots
	print >> f, res.alignment
	print >> f, ''
    f.close()
    return
def main(aligned_sents):
    t0 = time.time()
    ibm1 = create_ibm1(aligned_sents)
    save_model_output(aligned_sents, ibm1, "ibm1.txt")
    avg_aer = compute_avg_aer(aligned_sents, ibm1, 50)

    print ('IBM Model 1')
    print ('---------------------------')
    print('Average AER: {0:.3f}\n'.format(avg_aer))
    tA = time.time()
    print 'A1 time ' + str(tA - t0)
    ibm2 = create_ibm2(aligned_sents)
    save_model_output(aligned_sents, ibm2, "ibm2.txt")
    avg_aer = compute_avg_aer(aligned_sents, ibm2, 50)
    
    print ('IBM Model 2')
    print ('---------------------------')
    print('Average AER: {0:.3f}\n'.format(avg_aer))
    tB = time.time()
    print 'A2 time ' + str(tB - tA)
    print 'Total A time ' + str(tB - t0)
