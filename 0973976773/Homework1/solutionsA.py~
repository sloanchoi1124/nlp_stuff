import math
import nltk
import time

# Constants to be used by you when you fill the functions
START_SYMBOL = '*'
STOP_SYMBOL = 'STOP'
MINUS_INFINITY_SENTENCE_LOG_PROB = -1000

# TODO: IMPLEMENT THIS FUNCTION
# Calculates unigram, bigram, and trigram probabilities given a training corpus
# training_corpus: is a list of the sentences. Each sentence is a string with tokens separated by spaces, ending in a newline character.
# This function outputs three python dictionaries, where the keys are tuples expressing the ngram and the value is the log probability of that ngram
def calc_probabilities(training_corpus):
    unigram_p = {}
    bigram_p = {}
    trigram_p = {}
    unigram_dic = {}
    bigram_dic = {}
    trigram_dic = {}
   
    total_sentences = len(training_corpus)
    for sentence in training_corpus:
	whole_sentence = START_SYMBOL + ' '+ sentence.strip() + ' ' + STOP_SYMBOL
	words = whole_sentence.split(' ')
	
	for word in words:
	    if word not in unigram_dic:
		unigram_dic[word] = 1
	    else:
		unigram_dic[word] += 1
	
	for item in nltk.bigrams(words):
	    if item not in bigram_dic:
		bigram_dic[item] = 1
	    else:
		bigram_dic[item] += 1
	bigram_dic[(START_SYMBOL, START_SYMBOL)] = total_sentences

        trigram = (START_SYMBOL, START_SYMBOL, sentence.split()[0])

	if trigram in trigram_dic:
	    trigram_dic[trigram] += 1
	else:
	    #print trigram
	    trigram_dic[trigram] = 1
	for item in nltk.trigrams(words):
	    if item not in trigram_dic:
		trigram_dic[item] = 1
	    else:
		trigram_dic[item] += 1
    #print "passed line30!"
    
    n = 0
    for item in unigram_dic:
	n += unigram_dic[item]

    n -= total_sentences
    log_n = math.log(n, 2)
    for unigram in unigram_dic:
	unigram_p[(unigram,)] = math.log(unigram_dic[unigram], 2) - log_n
    #del unigram_p[(START_SYMBOL,)]
    for bigram in bigram_dic:
	bigram_p[bigram] = math.log(bigram_dic[bigram],2) - math.log(unigram_dic[bigram[0]],2)
    #del bigram_p[(START_SYMBOL, START_SYMBOL)]
    for trigram in trigram_dic:
	trigram_p[trigram] = math.log(trigram_dic[trigram], 2) - math.log(bigram_dic[trigram[:2]], 2)

    print "A1 OUTPUT"
    print unigram_p[("near",)]
    print bigram_p[("near", "the")]
    print trigram_p[("near", "the", "ecliptic")]
    #print trigram_p[("and", "not", "come")]
    return unigram_p, bigram_p, trigram_p

# Prints the output for q1
# Each input is a python dictionary where keys are a tuple expressing the ngram, and the value is the log probability of that ngram
def q1_output(unigrams, bigrams, trigrams, filename):
    # output probabilities
    outfile = open(filename, 'w')

    unigrams_keys = unigrams.keys()
    unigrams_keys.sort()
    for unigram in unigrams_keys:
        outfile.write('UNIGRAM ' + unigram[0] + ' ' + str(unigrams[unigram]) + '\n')

    bigrams_keys = bigrams.keys()
    bigrams_keys.sort()
    for bigram in bigrams_keys:
        outfile.write('BIGRAM ' + bigram[0] + ' ' + bigram[1]  + ' ' + str(bigrams[bigram]) + '\n')

    trigrams_keys = trigrams.keys()
    trigrams_keys.sort()    
    for trigram in trigrams_keys:
        outfile.write('TRIGRAM ' + trigram[0] + ' ' + trigram[1] + ' ' + trigram[2] + ' ' + str(trigrams[trigram]) + '\n')

    outfile.close()


# TODO: IMPLEMENT THIS FUNCTION
# Calculates scores (log probabilities) for every sentence
# ngram_p: python dictionary of probabilities of uni-, bi- and trigrams.
# n: size of the ngram you want to use to compute probabilities
# corpus: list of sentences to score. Each sentence is a string with tokens separated by spaces, ending in a newline character.
# This function must return a python list of scores, where the first element is the score of the first sentence, etc. 
def score(ngram_p, n, corpus):
    scores = []
    ngram_keys = set(ngram_p.keys())
    for sentence in corpus:
	if n == 1:
	    tokens = sentence.split(' ')[:-1] + [STOP_SYMBOL]
	    tuples = [(item,) for item in tokens]
	elif n == 2:
	    tuples = nltk.bigrams([START_SYMBOL] + sentence.split(' ')[:-1] + [STOP_SYMBOL])
	elif n == 3:
	    tuples = nltk.trigrams([START_SYMBOL, START_SYMBOL] + sentence.split(' ')[:-1] + [STOP_SYMBOL])
	score = 0
	for item in tuples:
	    if item not in ngram_keys:
		score = MINUS_INFINITY_SENTENCE_LOG_PROB
		print item
		break
	    score += ngram_p[item]
	scores.append(score)
    return scores
    

# Outputs a score to a file
# scores: list of scores
# filename: is the output file name
def score_output(scores, filename):
    outfile = open(filename, 'w')
    for score in scores:
        outfile.write(str(score) + '\n')
    outfile.close()

# TODO: IMPLEMENT THIS FUNCTION
# Calculates scores (log probabilities) for every sentence with a linearly interpolated model
# Each ngram argument is a python dictionary where the keys are tuples that express an ngram and the value is the log probability of that ngram
# Like score(), this function returns a python list of scores
def linearscore(unigrams, bigrams, trigrams, corpus):
    from math import pow
    scores = []

    log_three = math.log(3,2)
    for sentence in corpus:
	tuples = nltk.trigrams([START_SYMBOL, START_SYMBOL] + sentence.split(' ')[:-1] + [STOP_SYMBOL])
	score = 0
	try:
	    for item in tuples:
		score += math.log(2.0 ** unigrams[item[2:]] + 2.0 ** bigrams[item[1:]] + 2.0 ** trigrams[item]), 2) - log_three
	except KeyError:
	    score = MINUS_INFINITY_SENTENCE_LOG_PROB
	scores.append(score)
    return scores

DATA_PATH = 'data/'
OUTPUT_PATH = 'output/'

# DO NOT MODIFY THE MAIN FUNCTION
def main():
    # start timer
    time.clock()

    # get data
    infile = open(DATA_PATH + 'Brown_train.txt', 'r')
    corpus = infile.readlines()
    infile.close()

    # calculate ngram probabilities (question 1)
    unigrams, bigrams, trigrams = calc_probabilities(corpus)

    # question 1 output
    q1_output(unigrams, bigrams, trigrams, OUTPUT_PATH + 'A1.txt')

    # score sentences (question 2)
    uniscores = score(unigrams, 1, corpus)
    biscores = score(bigrams, 2, corpus)
    triscores = score(trigrams, 3, corpus)

    # question 2 output
    score_output(uniscores, OUTPUT_PATH + 'A2.uni.txt')
    score_output(biscores, OUTPUT_PATH + 'A2.bi.txt')
    score_output(triscores, OUTPUT_PATH + 'A2.tri.txt')

    # linear interpolation (question 3)
    linearscores = linearscore(unigrams, bigrams, trigrams, corpus)

    # question 3 output
    score_output(linearscores, OUTPUT_PATH + 'A3.txt')

    # open Sample1 and Sample2 (question 5)
    infile = open(DATA_PATH + 'Sample1.txt', 'r')
    sample1 = infile.readlines()
    infile.close()
    infile = open(DATA_PATH + 'Sample2.txt', 'r')
    sample2 = infile.readlines()
    infile.close() 

    # score the samples
    sample1scores = linearscore(unigrams, bigrams, trigrams, sample1)
    sample2scores = linearscore(unigrams, bigrams, trigrams, sample2)

    # question 5 output
    score_output(sample1scores, OUTPUT_PATH + 'Sample1_scored.txt')
    score_output(sample2scores, OUTPUT_PATH + 'Sample2_scored.txt')

    # print total time to run Part A
    print "Part A time: " + str(time.clock()) + ' sec'

if __name__ == "__main__": main()
